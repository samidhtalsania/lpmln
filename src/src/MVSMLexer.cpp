/* Generated by re2c 0.16 on Wed Oct 19 17:48:54 2016 */
#line 1 "src/src/MVSMLexer.re"
#include "MVSMLexer.h"
#include "exceptions/syntax_exception.h"

int MVSMLexer::Tokenize(const char * YYCURSOR, int len , lexeme_t* lexeme)
{

 	if (lexeme->current >= (YYCURSOR + len)) {
        return 0;
    }
    lexeme->start = lexeme->current;

    const char * YYMARKER;
	#define YYCURSOR lexeme->current

	
#line 19 "<stdout>"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = *YYCURSOR;
	switch (yych) {
	case 0x00:	goto yy2;
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy6;
	case '\n':	goto yy8;
	case '!':	goto yy10;
	case '#':	goto yy12;
	case '(':	goto yy13;
	case ')':	goto yy15;
	case ',':	goto yy17;
	case '-':	goto yy19;
	case '.':	goto yy20;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy22;
	case ':':	goto yy25;
	case ';':	goto yy27;
	case '<':	goto yy29;
	case '=':	goto yy30;
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy32;
	case 'N':	goto yy35;
	case '^':	goto yy36;
	case 'n':	goto yy38;
	case '{':	goto yy39;
	case '}':	goto yy41;
	default:	goto yy4;
	}
yy2:
	++YYCURSOR;
#line 20 "src/src/MVSMLexer.re"
	{ return 0; }
#line 114 "<stdout>"
yy4:
	++YYCURSOR;
yy5:
#line 57 "src/src/MVSMLexer.re"
	{
									std::string str(--lexeme->current,0,1);
									throw syntax_exception("Syntax Error - Unexpected "+ str +"\n");
								}
#line 123 "<stdout>"
yy6:
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy43;
	case 'v':	goto yy46;
	default:	goto yy7;
	}
yy7:
#line 55 "src/src/MVSMLexer.re"
	{ return -1; }
#line 138 "<stdout>"
yy8:
	++YYCURSOR;
#line 56 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_NEWLINE; }
#line 143 "<stdout>"
yy10:
	++YYCURSOR;
#line 45 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_NEGATION;}
#line 148 "<stdout>"
yy12:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case 'c':	goto yy47;
	case 's':	goto yy48;
	default:	goto yy5;
	}
yy13:
	++YYCURSOR;
#line 30 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_LBRACKET; }
#line 161 "<stdout>"
yy15:
	++YYCURSOR;
#line 31 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_RBRACKET; }
#line 166 "<stdout>"
yy17:
	++YYCURSOR;
#line 32 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_COMMA; }
#line 171 "<stdout>"
yy19:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy22;
	default:	goto yy5;
	}
yy20:
	++YYCURSOR;
#line 19 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_DOT; }
#line 191 "<stdout>"
yy22:
	yyaccept = 2;
	YYMARKER = ++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	switch (yych) {
	case '.':	goto yy49;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy22;
	default:	goto yy24;
	}
yy24:
#line 22 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_NUMBER; }
#line 214 "<stdout>"
yy25:
	yyaccept = 3;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '-':	goto yy50;
	default:	goto yy26;
	}
yy26:
#line 53 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_COLON; }
#line 225 "<stdout>"
yy27:
	++YYCURSOR;
#line 51 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_SEMI_COLON;}
#line 230 "<stdout>"
yy29:
	yych = *++YYCURSOR;
	switch (yych) {
	case '=':	goto yy52;
	default:	goto yy5;
	}
yy30:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '>':	goto yy54;
	default:	goto yy31;
	}
yy31:
#line 29 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_EQUAL; }
#line 246 "<stdout>"
yy32:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy33:
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy32;
	default:	goto yy34;
	}
yy34:
#line 24 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_STRING; }
#line 320 "<stdout>"
yy35:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'O':	goto yy56;
	default:	goto yy33;
	}
yy36:
	++YYCURSOR;
#line 33 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_CONJUNCTION; }
#line 331 "<stdout>"
yy38:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o':	goto yy57;
	default:	goto yy33;
	}
yy39:
	++YYCURSOR;
#line 28 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_LPAREN; }
#line 342 "<stdout>"
yy41:
	++YYCURSOR;
#line 27 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_RPAREN; }
#line 347 "<stdout>"
yy43:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	switch (yych) {
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy43;
	case 'v':	goto yy46;
	default:	goto yy45;
	}
yy45:
	YYCURSOR = YYMARKER;
	switch (yyaccept) {
	case 0: 	goto yy7;
	case 1: 	goto yy5;
	case 2: 	goto yy24;
	default:	goto yy26;
	}
yy46:
	yych = *++YYCURSOR;
	switch (yych) {
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy58;
	default:	goto yy45;
	}
yy47:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o':	goto yy61;
	default:	goto yy45;
	}
yy48:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'u':	goto yy62;
	default:	goto yy45;
	}
yy49:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy63;
	default:	goto yy45;
	}
yy50:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = *YYCURSOR;
	switch (yych) {
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy50;
	case 'c':	goto yy65;
	case 'o':	goto yy66;
	case 's':	goto yy67;
	default:	goto yy45;
	}
yy52:
	++YYCURSOR;
#line 26 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_REVERSE_IMPLICATION; }
#line 422 "<stdout>"
yy54:
	++YYCURSOR;
#line 25 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_IMPLICATION; }
#line 427 "<stdout>"
yy56:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'T':	goto yy68;
	default:	goto yy33;
	}
yy57:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy68;
	default:	goto yy33;
	}
yy58:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	switch (yych) {
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy58;
	default:	goto yy60;
	}
yy60:
#line 36 "src/src/MVSMLexer.re"
	{
									while(*(lexeme->start) != 'v') lexeme->start++;
									while(*(lexeme->current) != 'v') lexeme->current--;
									lexeme->current++; 
									return MVSM_PARSE_TOKEN_DISJUNCTION;
								}
#line 459 "<stdout>"
yy61:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'u':	goto yy70;
	default:	goto yy45;
	}
yy62:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'm':	goto yy71;
	default:	goto yy45;
	}
yy63:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy63;
	default:	goto yy24;
	}
yy65:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o':	goto yy73;
	default:	goto yy45;
	}
yy66:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'b':	goto yy74;
	default:	goto yy45;
	}
yy67:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o':	goto yy75;
	default:	goto yy45;
	}
yy68:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy32;
	default:	goto yy69;
	}
yy69:
#line 23 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_NEGATION;}
#line 577 "<stdout>"
yy70:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n':	goto yy76;
	default:	goto yy45;
	}
yy71:
	++YYCURSOR;
#line 35 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_SUM;}
#line 588 "<stdout>"
yy73:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n':	goto yy77;
	default:	goto yy45;
	}
yy74:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'j':	goto yy78;
	default:	goto yy45;
	}
yy75:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r':	goto yy79;
	default:	goto yy45;
	}
yy76:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy80;
	default:	goto yy45;
	}
yy77:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's':	goto yy82;
	default:	goto yy45;
	}
yy78:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e':	goto yy83;
	default:	goto yy45;
	}
yy79:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy84;
	default:	goto yy45;
	}
yy80:
	++YYCURSOR;
#line 34 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_COUNT;}
#line 635 "<stdout>"
yy82:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy85;
	default:	goto yy45;
	}
yy83:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'c':	goto yy86;
	default:	goto yy45;
	}
yy84:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's':	goto yy87;
	default:	goto yy45;
	}
yy85:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a':	goto yy89;
	default:	goto yy45;
	}
yy86:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy90;
	default:	goto yy45;
	}
yy87:
	++YYCURSOR;
#line 47 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_SORTS;}
#line 670 "<stdout>"
yy89:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n':	goto yy91;
	default:	goto yy45;
	}
yy90:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's':	goto yy92;
	default:	goto yy45;
	}
yy91:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy94;
	default:	goto yy45;
	}
yy92:
	++YYCURSOR;
#line 48 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_OBJECTS;}
#line 693 "<stdout>"
yy94:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's':	goto yy95;
	default:	goto yy45;
	}
yy95:
	++YYCURSOR;
#line 49 "src/src/MVSMLexer.re"
	{ return MVSM_PARSE_TOKEN_CONSTANTS;}
#line 704 "<stdout>"
}
#line 62 "src/src/MVSMLexer.re"


}